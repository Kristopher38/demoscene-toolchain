#!/usr/bin/env python2.7 -B

# Build development cross toolchain for m68k-elf target.

from fnmatch import fnmatch
from logging import info, getLogger
from os import environ
import argparse
import logging
import platform
import sys

URLS = \
  ['https://ftp.gnu.org/gnu/gmp/gmp-6.1.2.tar.bz2',
   'https://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz',
   'https://ftp.gnu.org/gnu/mpfr/mpfr-4.0.1.tar.bz2',
   'http://isl.gforge.inria.fr/isl-0.19.tar.bz2',
   'https://ftp.gnu.org/gnu/automake/automake-1.15.tar.gz',
   ('http://www.haage-partner.de/download/AmigaOS/NDK39.lha', 'NDK_3.9.lha'),
   'ftp://sourceware.org/pub/binutils/releases/binutils-2.31.tar.gz',
   'ftp://sourceware.org/pub/gcc/releases/gcc-8.2.0/gcc-8.2.0.tar.gz']


from common import * # NOQA


@recipe('target-prepare')
def prepare_target():
  info('preparing target')

  with cwd('{prefix}/{target}'):
    mkdir('include/inline', 'include/lvo', 'lib', 'lib/fd', 'lib/sfd', 'doc')


@recipe('fd2sfd-install')
def install_fd2sfd():
  info('installing fd2sfd')

  copy('{build}/fd2sfd/fd2sfd', '{prefix}/bin')
  copy('{build}/fd2sfd/cross/share/m68k-amigaos/alib.h',
       '{prefix}/{target}/include/inline')


@recipe('fd2pragma-install')
def install_fd2pragma():
  info('installing fd2pragma')

  copy('{build}/fd2pragma/fd2pragma', '{prefix}/bin')
  for header in ['macros.h', 'stubs.h']:
      copy(path.join('{build}/fd2pragma/Include/inline', header),
           '{prefix}/{target}/include/inline')


@recipe('{NDK}-install')
def install_ndk():
  info('installing ndk')

  copytree('{sources}/{NDK}/Include/include_h', '{prefix}/{target}/include')
  copytree('{sources}/{NDK}/Include/include_i', '{prefix}/{target}/include')
  copytree('{sources}/{NDK}/Include/fd', '{prefix}/{target}/lib/fd')
  copytree('{sources}/{NDK}/Include/sfd', '{prefix}/{target}/lib/sfd')
  copytree('{sources}/{NDK}/Include/linker_libs', '{prefix}/{target}/lib',
           exclude=['README'])
  copytree('{sources}/{NDK}/Documentation/Autodocs', '{prefix}/{target}/doc')

  for name in find('{prefix}/{target}/lib/sfd', include=['*.sfd']):
    base = path.basename(name).split('_')[0]

    execute('sfdc', '--target=m68k-amigaos', '--mode=proto',
            '--output={prefix}/{target}/include/proto/%s.h' % base, name)
    execute('sfdc', '--target=m68k-amigaos', '--mode=macros',
            '--output={prefix}/{target}/include/inline/%s.h' % base, name)
    execute('sfdc', '--target=m68k-amigaos', '--mode=lvo',
            '--output={prefix}/{target}/include/lvo/%s_lib.i' % base, name)


def update_autotools(dst):
  copy('{sources}/{automake}/lib/config.guess', path.join(dst, 'config.guess'))
  copy('{sources}/{automake}/lib/config.sub', path.join(dst, 'config.sub'))


def build():
  for var in environ.keys():
    if var not in ['_', 'LOGNAME', 'HOME', 'SHELL', 'TMPDIR', 'PWD']:
      del environ[var]

  environ['PATH'] = '/usr/bin:/bin'
  environ['LANG'] = 'C'
  environ['TERM'] = 'xterm'

  add_site_dir('{prefix}')

  if platform.system() == 'Darwin':
    cc, cxx = 'clang', 'clang++'
  else:
    cc, cxx = 'gcc', 'g++'

  environ['CC'] = find_executable(cc)
  environ['CXX'] = find_executable(cxx)

  find_executable('bison')
  find_executable('flex')
  find_executable('make')
  find_executable('git')

  environ['PATH'] = ":".join([path.join('{prefix}', 'bin'),
                              path.join('{host}', 'bin'),
                              environ['PATH']])

  with cwd('{archives}'):
    for url in URLS:
      if type(url) == tuple:
        url, name = url[0], url[1]
      else:
        name = path.basename(url)
      fetch(name, url)

  py_ver = 'python%d.%d' % (sys.version_info.major, sys.version_info.minor)
  require_header([path.join(py_ver, 'Python.h')],
                 lang='c', errmsg='python-dev package missing')

  execute('git', 'submodule', 'init', 'submodules/python-lhafile')
  execute('git', 'submodule', 'update', 'submodules/python-lhafile')
  unpack('python-lha', work_dir='{build}')
  pysetup('python-lha')

  unpack('{gmp}')
  configure('{gmp}',
            '--disable-shared',
            '--prefix={host}')
  make('{gmp}', parallel=True)
  make('{gmp}', 'install')

  unpack('{mpfr}')
  configure('{mpfr}',
            '--disable-shared',
            '--prefix={host}',
            '--with-gmp={host}')
  make('{mpfr}', parallel=True)
  make('{mpfr}', 'install')

  unpack('{mpc}')
  configure('{mpc}',
            '--disable-shared',
            '--prefix={host}',
            '--with-gmp={host}',
            '--with-mpfr={host}')
  make('{mpc}', parallel=True)
  make('{mpc}', 'install')

  unpack('{isl}')
  configure('{isl}',
            '--disable-shared',
            '--prefix={host}',
            '--with-gmp-prefix={host}')
  make('{isl}', parallel=True)
  make('{isl}', 'install')

  prepare_target()

  unpack('{automake}')

  update_autotools('{submodules}/fd2sfd')
  unpack('fd2sfd', work_dir='{build}')
  patch('fd2sfd', work_dir='{build}')
  configure('fd2sfd', '--prefix={prefix}', from_dir='{build}/fd2sfd')
  make('fd2sfd')
  install_fd2sfd()

  unpack('fd2pragma', work_dir='{build}')
  patch('fd2pragma', work_dir='{build}')
  make('fd2pragma')
  install_fd2pragma()

  unpack('sfdc')
  patch('sfdc')
  configure('sfdc', '--prefix={prefix}', copy_source=True)
  make('sfdc')
  make('sfdc', 'install')

  unpack('{NDK}')
  patch('{NDK}')
  install_ndk()

  unpack('{binutils}')
  with env(CFLAGS='-Wno-error'):
    configure('{binutils}',
              '--prefix={prefix}',
              '--target={target}',
              '--with-isl={host}',
              from_dir='{sources}/{binutils}')
    make('{binutils}', parallel=True)
    make('{binutils}', 'install')

    unpack('{gcc}')
    configure('{gcc}',
              '--prefix={prefix}',
              '--target={target}',
              '--with-gmp={host}',
              '--with-mpfr={host}',
              '--with-isl={host}',
              '--enable-languages=c',
              '--without-headers',
              from_dir='{sources}/{gcc}')
    make('{gcc}', 'all-gcc')
    make('{gcc}', 'install-gcc')


def clean():
  rmtree('{stamps}')
  rmtree('{sources}')
  rmtree('{host}')
  rmtree('{build}')
  rmtree('{tmpdir}')


if __name__ == "__main__":
  logging.basicConfig(level=logging.DEBUG, format='%(levelname)s: %(message)s')

  if not sys.version_info[:2] == (2, 7):
    panic('I need Python 2.7 to run!')

  if not any(fnmatch(platform.system(), pat)
             for pat in ['Darwin', 'Linux', 'CYGWIN_NT*', 'MSYS_NT*']):
    panic('Build on %s not supported!', platform.system())

  if platform.machine() not in ['i686', 'x86_64']:
    panic('Build on %s architecture not supported!', platform.machine())

  parser = argparse.ArgumentParser(description='Build cross toolchain.')
  parser.add_argument('action',
                      choices=['build', 'clean', 'download'],
                      default='build', help='perform action')
  parser.add_argument('args', metavar='ARGS', type=str, nargs='*',
                      help='action arguments')
  parser.add_argument('-q', '--quiet', action='store_true')
  parser.add_argument('--prefix', type=str, default=None,
                      help='installation directory')
  args = parser.parse_args()

  setvar(top=path.abspath(path.dirname(sys.argv[0])),
         py_ver='python%d.%d' % (sys.version_info.major, sys.version_info.minor))

  setvar(gmp='gmp-6.1.2',
         mpfr='mpfr-4.0.1',
         mpc='mpc-1.1.0',
         isl='isl-0.19',
         cloog='cloog-0.18.4',
         automake='automake-1.15',
         binutils='binutils-2.31',
         gcc='gcc-8.2.0',
         NDK='NDK_3.9',
         target='m68k-elf',
         python=sys.executable,
         sitedir=path.join('lib', '{py_ver}', 'site-packages'),
         patches=path.join('{top}', 'patches'),
         stamps=path.join('{top}', '.build-dev', 'stamps'),
         build=path.join('{top}', '.build-dev', 'build'),
         sources=path.join('{top}', '.build-dev', 'sources'),
         host=path.join('{top}', '.build-dev', 'host'),
         tmpdir=path.join('{top}', '.build-dev', 'tmp'),
         prefix=path.join('{top}', 'm68k-elf'),
         archives=path.join('{top}', '.build-dev', 'archives'),
         submodules=path.join('{top}', 'submodules'))

  if args.quiet:
    getLogger().setLevel(logging.INFO)

  if args.prefix is not None:
    setvar(prefix=args.prefix)

  if not path.exists('{prefix}'):
    mkdir('{prefix}')

  action = args.action.replace('-', '_')
  globals()[action].__call__(*args.args)
